#
#codepipeline
#

resource "aws_codepipeline" "tf-bg-pipeline05" {
  artifact_store {
    location = aws_s3_bucket.tf-codepipeline-ap-northeast-1-699945210646.id
    type     = "S3"
  }

  name     = "bg-pipeline05"
  role_arn = aws_iam_role.tf-AWSCodePipelineServiceRole-bg-pipeline05.arn


    stage {
    action {
      category = "Source"

      configuration = {
        BranchName           = "main"
        ConnectionArn        = aws_codestarconnections_connection.tf-bg-codestar-connections.arn
        FullRepositoryId     = "usan73/bg-gitrp05"
        OutputArtifactFormat = "CODE_ZIP"
      }

      name             = "Source"
      namespace        = "SourceVariables"
      output_artifacts = ["SourceArtifact"]
      owner            = "AWS"
      provider         = "CodeStarSourceConnection"
      region           = "ap-northeast-1"
      run_order        = "1"
      version          = "1"
    }

    name = "Source"
  }

  stage {
    action {
      category = "Build"

      configuration = {
        ProjectName = aws_codebuild_project.tf-bg-codebuild-project05.id
      }

      input_artifacts  = ["SourceArtifact"]
      name             = "Build"
      namespace        = "BuildVariables"
      output_artifacts = ["BuildArtifact"]
      owner            = "AWS"
      provider         = "CodeBuild"
      region           = "ap-northeast-1"
      run_order        = "1"
      version          = "1"
    }

    name = "Build"
  }

  stage {
    action {
      category = "Deploy"

      configuration = {
        AppSpecTemplateArtifact        = "BuildArtifact"
        ApplicationName                = aws_codedeploy_app.tf-AppECS-bg-cluster05-bg-service05.name
        DeploymentGroupName            = aws_codedeploy_deployment_group.tf-DgpECS-bg-cluster05-bg-service05.deployment_group_name
        Image1ArtifactName             = "BuildArtifact"
        Image1ContainerName            = "IMAGE1_NAME"
        TaskDefinitionTemplateArtifact = "BuildArtifact"
      }

      input_artifacts = ["BuildArtifact"]
      name            = "Deploy"
      namespace       = "DeployVariables"
      owner           = "AWS"
      provider        = "CodeDeployToECS"
      region          = "ap-northeast-1"
      run_order       = "1"
      version         = "1"
    }

    name = "Deploy"
  }

}

#
#s3
#

resource "aws_s3_bucket" "tf-codepipeline-ap-northeast-1-699945210646" {
  bucket        = "codepipeline-ap-northeast-1-699945210646"
  force_destroy = "false"

  object_lock_enabled = "false"

  policy = <<POLICY
{
  "Id": "SSEAndSSLPolicy",
  "Statement": [
    {
      "Action": "s3:PutObject",
      "Condition": {
        "StringNotEquals": {
          "s3:x-amz-server-side-encryption": "aws:kms"
        }
      },
      "Effect": "Deny",
      "Principal": "*",
      "Resource": "arn:aws:s3:::codepipeline-ap-northeast-1-699945210646/*",
      "Sid": "DenyUnEncryptedObjectUploads"
    },
    {
      "Action": "s3:*",
      "Condition": {
        "Bool": {
          "aws:SecureTransport": "false"
        }
      },
      "Effect": "Deny",
      "Principal": "*",
      "Resource": "arn:aws:s3:::codepipeline-ap-northeast-1-699945210646/*",
      "Sid": "DenyInsecureConnections"
    }
  ],
  "Version": "2012-10-17"
}
POLICY

  request_payer = "BucketOwner"

  server_side_encryption_configuration {
    rule {
      apply_server_side_encryption_by_default {
        sse_algorithm = "AES256"
      }

      bucket_key_enabled = "false"
    }
  }

  versioning {
    enabled    = "false"
    mfa_delete = "false"
  }
}

#
#bucket-ownership
#

resource "aws_s3_bucket_ownership_controls" "tf-bg-bucket-ownership-controls" {
  bucket = aws_s3_bucket.tf-codepipeline-ap-northeast-1-699945210646.id

  rule {
    object_ownership = "BucketOwnerEnforced"
  }
}

#
#s3-bucket-acl
#

resource "aws_s3_bucket_acl" "tf-bg-bucket-acl" {
  depends_on = [aws_s3_bucket_ownership_controls.tf-bg-bucket-ownership-controls]

  bucket = aws_s3_bucket.tf-codepipeline-ap-northeast-1-699945210646.id
  access_control_policy {
    grant {
      grantee {
        id   = data.aws_canonical_user_id.current.id
        type = "CanonicalUser"
      }
      permission = "FULL_CONTROL"
    }

    owner {
      id = data.aws_canonical_user_id.current.id
    }
  }
}

#
#canonicaluserid
#

data "aws_canonical_user_id" "current" {}


#
#codestar
#

resource "aws_codestarconnections_connection" "tf-bg-codestar-connections" {
  name          = "bg-githubrp-cn05"
  provider_type = "GitHub"
}

#
#codedeploy
#

resource "aws_codedeploy_app" "tf-AppECS-bg-cluster05-bg-service05" {
  compute_platform = "ECS"
  name             = "AppECS-bg-cluster05-bg-service05"
}

#deployment-group
resource "aws_codedeploy_deployment_group" "tf-DgpECS-bg-cluster05-bg-service05" {
  app_name               = aws_codedeploy_app.tf-AppECS-bg-cluster05-bg-service05.name
  deployment_config_name = "CodeDeployDefault.ECSAllAtOnce"
  deployment_group_name  = "DgpECS-bg-cluster05-bg-service05"
  service_role_arn       = aws_iam_role.tf-practice-codedeploy-role.arn

  auto_rollback_configuration {
    enabled = true
    events  = ["DEPLOYMENT_FAILURE"]
  }

  blue_green_deployment_config {
    deployment_ready_option {
      action_on_timeout = "CONTINUE_DEPLOYMENT"
    }

    terminate_blue_instances_on_deployment_success {
      action                           = "TERMINATE"
      termination_wait_time_in_minutes = 60
    }
  }

  deployment_style {
    deployment_option = "WITH_TRAFFIC_CONTROL"
    deployment_type   = "BLUE_GREEN"
  }

  ecs_service {
    cluster_name = aws_ecs_cluster.tf-bg-cluster05.name
    service_name = aws_ecs_service.tf-bg-service05.name
  }

  load_balancer_info {
    target_group_pair_info {
      prod_traffic_route {
        listener_arns = [aws_lb_listener.tf-bg-listener.arn]
      }

      target_group {
        name = aws_lb_target_group.tf-bg-tg-blue05.name
      }

      target_group {
        name = aws_lb_target_group.tf-bg-tg-green05.name
      }
    }
  }
}




#
#codebuild
#


resource "aws_codebuild_project" "tf-bg-codebuild-project05" {
  artifacts {
    encryption_disabled    = "false"
    name                   = "test-bg-codebuild-project05"
    override_artifact_name = "false"
    packaging              = "NONE"
    type                   = "CODEPIPELINE"
  }

  badge_enabled = "false"
  build_timeout = "60"

  cache {
    type = "NO_CACHE"
  }

  encryption_key         = "arn:aws:kms:ap-northeast-1:267751904634:alias/aws/s3"

  environment {
    compute_type                = "BUILD_GENERAL1_SMALL"
    image                       = "aws/codebuild/amazonlinux2-x86_64-standard:5.0"
    image_pull_credentials_type = "CODEBUILD"
    privileged_mode             = "true"
    type                        = "LINUX_CONTAINER"
  }

  logs_config {
    cloudwatch_logs {
      status = "ENABLED"
    }

    s3_logs {
      encryption_disabled = "false"
      status              = "DISABLED"
    }
  }

  name               = "bg-codebuild-project05"
  project_visibility = "PRIVATE"
  queued_timeout     = "480"
  service_role       = aws_iam_role.tf-codebuild-b-service-role.arn

  source {
    git_clone_depth     = "0"
    insecure_ssl        = "false"
    report_build_status = "false"
    type                = "CODEPIPELINE"
  }

  vpc_config {
    security_group_ids = [aws_security_group.tf-bg_sg2.id]
    subnets            = [aws_subnet.tf-bg-private-subnet.id]
    vpc_id             = aws_vpc.tf-practice-vpc.id
  }
}





#
#cloudwatch
#

resource "aws_cloudwatch_log_group" "tf-bg-cloudwatch-log-group" {
  name = "/aws/codebuild/bg-codebuild-project05"
}

