#ECS
resource "aws_ecs_service" "tf-bg-service05" {

  name = "bg-service05"
  cluster = aws_ecs_cluster.tf-bg-cluster05.id
  task_definition     = aws_ecs_task_definition.tf-bg-taskdef05.arn

  deployment_controller {
    type = "CODE_DEPLOY"
  }

  deployment_maximum_percent         = "200"
  deployment_minimum_healthy_percent = "100"
  desired_count                      = "1"
  enable_ecs_managed_tags            = "false"
  enable_execute_command             = "false"
  health_check_grace_period_seconds  = "0"
  launch_type                        = "FARGATE"

  load_balancer {
    container_name   = "bg-container05"
    container_port   = "80"
    target_group_arn = aws_lb_target_group.tf-bg-tg-green05.arn
  }

  network_configuration {
    assign_public_ip = "true"
    security_groups  = [aws_security_group.tf-bg-sg.id]
    subnets          = [aws_subnet.tf-bg-private-subnet.id]
  }

  platform_version    = "1.4.0"
  scheduling_strategy = "REPLICA"
}

#
#alb
#

resource "aws_lb" "tf-bg-alb05" {
  desync_mitigation_mode                      = "defensive"
  drop_invalid_header_fields                  = "false"
  enable_cross_zone_load_balancing            = "true"
  enable_deletion_protection                  = "false"
  enable_http2                                = "true"
  enable_tls_version_and_cipher_suite_headers = "false"
  enable_waf_fail_open                        = "false"
  enable_xff_client_port                      = "false"
  idle_timeout                                = "60"
  internal                                    = "false"
  ip_address_type                             = "ipv4"
  load_balancer_type                          = "application"
  name                                        = "bg-alb05"
  preserve_host_header                        = "false"
  security_groups                             = [aws_security_group.tf-bg_sg2.id]

  subnet_mapping {
    subnet_id = aws_subnet.tf-bg-public-subnet1.id
  }

  subnet_mapping {
    subnet_id = aws_subnet.tf-bg-public-subnet2.id
  }

  subnets                    = [aws_subnet.tf-bg-public-subnet1.id, aws_subnet.tf-bg-public-subnet2.id]
  xff_header_processing_mode = "append"
}

#
#targetgroup
#

resource "aws_lb_target_group" "tf-bg-tg-green05" {
  deregistration_delay = "300"

  health_check {
    enabled             = "true"
    healthy_threshold   = "5"
    interval            = "30"
    matcher             = "200"
    path                = "/"
    port                = "traffic-port"
    protocol            = "HTTP"
    timeout             = "5"
    unhealthy_threshold = "2"
  }

  ip_address_type                   = "ipv4"
  load_balancing_algorithm_type     = "round_robin"
  load_balancing_cross_zone_enabled = "use_load_balancer_configuration"
  name                              = "bg-tg-green05"
  port                              = "80"
  protocol                          = "HTTP"
  protocol_version                  = "HTTP1"
  slow_start                        = "0"

  stickiness {
    cookie_duration = "86400"
    enabled         = "false"
    type            = "lb_cookie"
  }

  target_type = "ip"
  vpc_id      = aws_vpc.tf-practice-vpc.id
}

#
resource "aws_lb_target_group" "tf-bg-tg-blue05" {
  deregistration_delay = "300"

  health_check {
    enabled             = "true"
    healthy_threshold   = "5"
    interval            = "30"
    matcher             = "200"
    path                = "/"
    port                = "traffic-port"
    protocol            = "HTTP"
    timeout             = "5"
    unhealthy_threshold = "2"
  }

  ip_address_type                   = "ipv4"
  load_balancing_algorithm_type     = "round_robin"
  load_balancing_cross_zone_enabled = "use_load_balancer_configuration"
  name                              = "bg-tg-blue05"
  port                              = "80"
  protocol                          = "HTTP"
  protocol_version                  = "HTTP1"
  slow_start                        = "0"

  stickiness {
    cookie_duration = "86400"
    enabled         = "false"
    type            = "lb_cookie"
  }

  target_type = "ip"
  vpc_id      = aws_vpc.tf-practice-vpc.id
}

#
#listener
#

resource "aws_lb_listener" "tf-bg-listener" {
  default_action {
    order            = "1"
    target_group_arn = aws_lb_target_group.tf-bg-tg-green05.arn
    type             = "forward"
  }

  load_balancer_arn = aws_lb.tf-bg-alb05.arn
  port              = "80"
  protocol          = "HTTP"
}

#
#subnet
#

resource "aws_subnet" "tf-bg-private-subnet" {
  assign_ipv6_address_on_creation                = "false"
  cidr_block                                     = "10.0.1.0/24"
  enable_dns64                                   = "false"
  enable_resource_name_dns_a_record_on_launch    = "false"
  enable_resource_name_dns_aaaa_record_on_launch = "false"
  ipv6_native                                    = "false"
  map_public_ip_on_launch                        = "false"
  private_dns_hostname_type_on_launch            = "ip-name"

  tags = {
    Name = "practice_private_subnet"
  }

  tags_all = {
    Name = "practice_private_subnet"
  }

  vpc_id = aws_vpc.tf-practice-vpc.id
}

#
resource "aws_subnet" "tf-bg-public-subnet1" {
  assign_ipv6_address_on_creation                = "false"
  cidr_block                                     = "10.0.0.0/24"
  enable_dns64                                   = "false"
  enable_resource_name_dns_a_record_on_launch    = "false"
  enable_resource_name_dns_aaaa_record_on_launch = "false"
  ipv6_native                                    = "false"
  map_public_ip_on_launch                        = "false"
  private_dns_hostname_type_on_launch            = "ip-name"

  tags = {
    Name = "practice_public_subnet"
  }

  tags_all = {
    Name = "practice_public_subnet"
  }

  vpc_id = aws_vpc.tf-practice-vpc.id
}

#
resource "aws_subnet" "tf-bg-public-subnet2" {
  assign_ipv6_address_on_creation                = "false"
  cidr_block                                     = "10.0.3.0/24"
  enable_dns64                                   = "false"
  enable_resource_name_dns_a_record_on_launch    = "false"
  enable_resource_name_dns_aaaa_record_on_launch = "false"
  ipv6_native                                    = "false"
  map_public_ip_on_launch                        = "false"
  private_dns_hostname_type_on_launch            = "ip-name"

  tags = {
    Name = "practice-public-subnet-2"
  }

  tags_all = {
    Name = "practice-public-subnet-2"
  }

  vpc_id = aws_vpc.tf-practice-vpc.id
}


#
#sg
#
resource "aws_security_group" "tf-bg-sg" {
  description = "2023-08-17T07:22:02.824Z"

  egress {
    cidr_blocks = ["0.0.0.0/0"]
    from_port   = "0"
    protocol    = "-1"
    self        = "false"
    to_port     = "0"
  }

  ingress {
    cidr_blocks = ["0.0.0.0/0"]
    from_port   = "0"
    protocol    = "tcp"
    self        = "false"
    to_port     = "65535"
  }

  name   = "bg-ser-5269"
  vpc_id = aws_vpc.tf-practice-vpc.id
}

#

resource "aws_security_group" "tf-bg_sg2" {
  description = "practice_task_sg_2"

  egress {
    cidr_blocks = ["0.0.0.0/0"]
    from_port   = "0"
    protocol    = "-1"
    self        = "false"
    to_port     = "0"
  }

  ingress {
    cidr_blocks      = ["0.0.0.0/0"]
    from_port        = "0"
    ipv6_cidr_blocks = ["::/0"]
    protocol         = "tcp"
    self             = "false"
    to_port          = "65535"
  }

  name   = "practice_task_sg_2"
  vpc_id = aws_vpc.tf-practice-vpc.id
}

#
#vpc
#

resource "aws_vpc" "tf-practice-vpc" {
  assign_generated_ipv6_cidr_block     = "false"
  cidr_block                           = "10.0.0.0/21"
  enable_classiclink                   = "false"
  enable_classiclink_dns_support       = "false"
  enable_dns_hostnames                 = "false"
  enable_dns_support                   = "true"
  enable_network_address_usage_metrics = "false"
  instance_tenancy                     = "default"

  tags = {
    Name = "practice_vpc"
  }

  tags_all = {
    Name = "practice_vpc"
  }
}

#
#taskdef
#

resource "aws_ecs_task_definition" "tf-bg-taskdef05" {
  container_definitions    = "[{\"cpu\":0,\"environment\":[],\"essential\":true,\"image\":\"267751904634.dkr.ecr.ap-northeast-1.amazonaws.com/bg-rp05:91e7a10\",\"mountPoints\":[],\"name\":\"bg-container05\",\"portMappings\":[{\"containerPort\":80,\"hostPort\":80,\"protocol\":\"tcp\"}],\"volumesFrom\":[]}]"
  cpu                      = "256"
  execution_role_arn       = aws_iam_role.tf-ecsTaskExecutionRole.arn
  family                   = "bg-taskdef05"
  memory                   = "512"
  network_mode             = "awsvpc"
  requires_compatibilities = ["FARGATE"]
  tags = {
    tag-key = "test-taskdef"
  }
}

#
#
#


#
#ecr
#




#
#ecsTaskExecutionRole
#

resource "aws_iam_role" "tf-ecsTaskExecutionRole" {
  assume_role_policy = <<POLICY
{
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Effect": "Allow",
      "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
      },
      "Sid": ""
    }
  ],
  "Version": "2008-10-17"
}
POLICY
  managed_policy_arns  = ["arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS", "arn:aws:iam::aws:policy/AmazonECS_FullAccess", "arn:aws:iam::aws:policy/CloudFrontFullAccess", "arn:aws:iam::aws:policy/CloudWatchFullAccess", "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess", "arn:aws:iam::aws:policy/EC2InstanceProfileForImageBuilderECRContainerBuilds", "arn:aws:iam::aws:policy/service-role/AWSAppRunnerServicePolicyForECRAccess", "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"]
  max_session_duration = "3600"
  name                 = "ecsTaskExecutionRole"
  path                 = "/"
}

#
#cluster
#
resource "aws_ecs_cluster" "tf-bg-cluster05" {
  capacity_providers = ["FARGATE", "FARGATE_SPOT"]
  name               = "bg-cluster05"

  setting {
    name  = "containerInsights"
    value = "disabled"
  }
}



